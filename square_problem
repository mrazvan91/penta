/*
    Se dau patru puncte in plan, sa se verifice daca sunt colturile unui patrat.
*/

/**
 *
 * @author Maldarus Razvan
 */
public class Point {
    private int x = 0;
    private int y = 0;
    
    public Point(){}
    
    public Point(int x, int y){
        this.x = x;
        this.y = y;
    }

    /**
     * @return the x
     */
    public int getX() {
        return x;
    }

    /**
     * @param x the x to set
     */
    public void setX(int x) {
        this.x = x;
    }

    /**
     * @return the y
     */
    public int getY() {
        return y;
    }

    /**
     * @param y the y to set
     */
    public void setY(int y) {
        this.y = y;
    }

    @Override
    public String toString() {
        return "Point{" + "x=" + x + ", y=" + y + '}';
    }
}





import java.util.Arrays;
import java.util.Comparator;

/**
 *
 * @author Maldarus Razvan
 */
public class PointMain {
    
    public static void main(String[] args)
    {
        boolean isSq = isSquare(new Point(2,2), new Point(4,4), new Point(4,2), new Point(2,4));
        System.out.println("Is square: " + isSq);
    }
    
    public static boolean isSquare(Point p1, Point p2, Point p3, Point p4)
    {
        Point[] points = {p1, p2, p3, p4};
                
        Arrays.sort(points,new Comparator<Point>(){  
            @Override  
            public int compare(Point p1, Point p2){  
                int cmp = p1.getX() - p2.getX();
                if(cmp == 0)
                    cmp = p1.getY() - p2.getY();
                return cmp;
            }  
        }); 
        
        if( ( distance(points[0], points[1]) == distance(points[0], points[2]) )//1:2 = 1:3
            && ( distance(points[0], points[1]) == distance(points[1], points[3]) )//1:2 = 2:4
                &&( distance(points[0], points[1]) == distance(points[2], points[3]) )//1:2 = 3:4
                    &&( distance(points[0], points[1]) == distance(points[2], points[3]) )//1:2 = 3:4
                        &&( distance(points[0], points[3]) == distance(points[1], points[2]) ) )//1:4= 2:3 - diagonala
                            return true;

        return false;
    }
    
    public static double distance(Point p1, Point p2)
    {
        return Math.sqrt( Math.pow( (p2.getX() - p1.getX() ), 2 ) + Math.pow( (p2.getY() - p1.getY() ), 2 ) );
    }
}



/*
  run:
  Is square: true
  BUILD SUCCESSFUL (total time: 0 seconds)
*/  
